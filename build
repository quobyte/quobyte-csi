
#!/bin/bash
DEFAULT_CONTAINER_URL_BASE="quay.io/quobyte/csi:"
# change default with with CONTAINER_URL_BASE="<container-base-url>" ./build
CONTAINER_URL_BASE="${CONTAINER_URL_BASE:-$DEFAULT_CONTAINER_URL_BASE}"
# https://helm.sh/docs/topics/chart_repository/#github-pages-example
# Quobyte CSI charts are hosted as github pages. Artifacthub.io uses this
# location to grab the deployable charts from docs/index.yaml
CHART_PACKAGE_DIR="docs" 
CHART_DIR="quobyte-csi-driver"

container_build_and_push(){
    if [[ -z "${CONTAINER_URL_BASE}" ]]; then
      echo "FAILURE: container base url should not be empty"
    fi
    VERSION=$1
    if [[ -z "${VERSION}" || "{$VERSION}" == *\ * ]]; then
      echo "FAILURE: ${VERSION} is not a valid version string. Version must not be empty or should not contain any spaces"
    fi
    IMAGE="${CONTAINER_URL_BASE}${$1}"
    echo 'Building docker image and push to ${IMAGE}'
    sudo docker build -t quobyte-csi -f Dockerfile .
    sudo docker run -it quobyte-csi
    CSI_RUN_ID="$(sudo docker ps -l | grep 'quobyte-csi' | awk '{print $1}')"
    echo "Pushing $CSI_RUN_ID to ${IMAGE}"
    sudo docker commit "$CSI_RUN_ID" "$IMAGE"
    sudo docker push "$IMAGE"
    push_succeeded="$?"
    if [[ ${push_succeeded} -ne 0 ]]; then
      echo 'FAILURE: container image ${IMAGE} cannot be pushed'
      echo 'Please fix the reported issues and retry'
      exit 1
    fi
}

rebase_charts_on_master(){
  echo 'updating master with version files...'
  git push origin master
  git checkout charts
  echo 'rebasing charts on current master...'
  git rebase master
  echo 'updating charts with rebased version...'
  git push charts
  echo 'switching back to master...'
  git checkout master
}

print_post_release_instructions(){
  echo 'Please go to https://github.com/quobyte/quobyte-csi/releases'
  echo 'and make a release for the tag version ${VERSION} with release notes'
}

build_helm_package(){
  # TODO(venkat): add version info to chart files (Chart.aml, Values.yaml)
  
  helm package -d "${CHART_PACKAGE_DIR}" "${CHART_DIR}" 
  helm repo index "${CHART_PACKAGE_DIR}"
}

if [[ "$1" = '-h' || "$1" = '--help' ]]; then
  echo './build                                Builds the executable'
  echo './build container <release-tag>"       Builds pre and pushes container'
  echo './build release "<release-tag>"        Builds the executable, docker image and'
  echo '                                         pushes the container and creates a helm chart'
  ehco '                                         for the release'
  echo "Example: ./build v0.2.0"
  exit 0
else
  echo 'Building executable'
  CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o quobyte-csi main.go
  build_success="$?"
  if [[ ${build_success} -eq 0 ]]; then
    echo "Build is successful"
  else
    echo "Build FAILURE"
    exit 1
  fi
  if [[ "${build_success}" -eq 0 && "$1" == "container" ]]; then
    container_build_and_push $2
  elif [[ "${build_success}" -eq 0 && "$1" == "release" ]]; then
    if [[ $(git rev-parse --abbrev-ref HEAD) != "master" ]]; then
      echo 'FAILURE: release can only be made on master branch'
      exit 1
    fi
    if [[ $(git status | grep -q "modified"; echo $?)  -eq 0 ]]; then
      echo "FAILURE: Branch has modified files, cannot make a release"
      exit 1
    fi
    container_build_and_push $2
    if [[ ! command -v helm &> /dev/null ]]; then 
       (cd /tmp && curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 \
          && chmod 700 get_helm.sh && ./get_helm.sh)
    fi
    build_helm_package
    # TODO(venkat): commit and push version and chart zip
    # TODO(venkat): create version tag
    rebase_charts_on_master
    print_post_release_instructions
  fi
fi