apiVersion: csi.storage.k8s.io/v1alpha1
kind: CSIDriver
metadata:
  name: csi.quobyte.com
spec:
  attachRequired: false
  podInfoOnMount: false
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: quobyte-controller
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: quobyte-csi
      role: quobyte-csi-controller
  serviceName: quobyte-csi
  replicas: 1
  template:
    metadata:
      labels:
        app: quobyte-csi
        role: quobyte-csi-controller
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: quobyte-csi-controller-sa
      containers:
        - name: csi-provisioner
          # image: quay.io/k8scsi/csi-provisioner:v1.0.1
          # TODO (Venkat): change it to quobyte container path
          image: quay.io/k8scsi/csi-provisioner:v1.0.1 
          imagePullPolicy: "Always"
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-cluster-driver-registrar
          image: quay.io/k8scsi/csi-cluster-driver-registrar:v1.0.1
          imagePullPolicy: "Always"
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--driver-requires-attachment=false"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: quobyte-csi-provisioner
          # TODO (Venkat): change it to quobyte's CSI container path
          image: quay.io/venkat_443/csi:v1.0.0-rc
          imagePullPolicy: "Always"
          args :
            - "--csi_socket=$(CSI_ENDPOINT)"
            - "--quobyte_mount_path=$(QUOBYTE_MOUNT_PATH)"
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--api_url=$(QUOBYTE_API_URL)" # Quobyte API URL
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: QUOBYTE_MOUNT_PATH
              value:  /mnt/quobyte/mounts
            - name: QUOBYTE_API_URL
              valueFrom:
                configMapKeyRef:
                  name: quobyte-csi-config
                  key: quobyte.apiURL # Quobyte API URL
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: quobyte-csi-controller-sa
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-cluster-driver-registrar-role
rules:
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["create", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-cluster-driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-cluster-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: quobyte-csi-node-plugin
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: quobyte-csi-node-plugin
  template:
    metadata:
      labels:
        app: quobyte-csi-node-plugin
        role: quobyte-csi-node-plugin
    spec:
      priorityClassName: system-node-critical
      serviceAccount: quobyte-csi-node-plugin-sa
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.0.1
          imagePullPolicy: "Always"
          args:
            - "--v=3"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/csi.quobyte.com /registration/csi.quobyte.com-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/csi.quobyte.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-sock
              mountPath: /registration/
        - name: quobyte-csi-node-plugin
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: quay.io/venkat_443/csi:v1.0.0-rc
          imagePullPolicy: "Always"
          args :
            - "--csi_socket=$(CSI_ENDPOINT)"
            - "--quobyte_mount_path=$(QUOBYTE_MOUNT_PATH)"
            - "--node_name=$(KUBE_NODE_NAME)"
            - "--api_url=$(QUOBYTE_API_URL)" # Quobyte API URL
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: QUOBYTE_MOUNT_PATH
              value:  /mnt/quobyte/mounts
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: QUOBYTE_API_URL
              valueFrom:
                configMapKeyRef:
                  name: quobyte-csi-config
                  key: quobyte.apiURL # Quobyte API URL
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: quobyte-mounts
              mountPath: /mnt/quobyte
              mountPropagation: "Bidirectional"
            - name: plugin-dir
              mountPath: /csi
      volumes:
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: quobyte-mounts
          hostPath:
            # Quobyte client also should use the same mount point
            path: /mnt/quobyte
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            # required by kubernetes CSI
            path: /var/lib/kubelet/plugins/csi.quobyte.com
            type: DirectoryOrCreate
        - name: registration-sock
          hostPath: 
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: quobyte-csi-node-plugin-sa
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quobyte-csi-driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: quobyte-csi-node-plugin-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: quobyte-csi-driver-registrar
  apiGroup: rbac.authorization.k8s.io 